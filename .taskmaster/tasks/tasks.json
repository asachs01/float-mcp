{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement MCP Streamable HTTP Transport",
        "description": "Implement the complete MCP Streamable HTTP transport layer according to the 2025-03-26 specification, including HTTP POST/GET endpoints, Server-Sent Events streaming, session management, security features, and connection resumability.",
        "details": "This task involves implementing a comprehensive HTTP transport layer for the Model Context Protocol (MCP) that supports both traditional request-response patterns and streaming communication. Key implementation components include:\n\n1. **HTTP Endpoints**: Create POST endpoint for MCP requests and GET endpoint for establishing SSE connections. Implement proper content-type handling (application/json for requests, text/event-stream for SSE).\n\n2. **Server-Sent Events (SSE) Streaming**: Implement SSE protocol for real-time bidirectional communication, including proper event formatting, connection keep-alive mechanisms, and graceful connection handling.\n\n3. **Session Management**: Design and implement session lifecycle management with unique session identifiers, session state tracking, timeout handling, and proper cleanup procedures.\n\n4. **Security Implementation**: Integrate authentication mechanisms (API keys, OAuth, JWT tokens), implement CORS policies, add rate limiting, input validation, and secure header handling.\n\n5. **Connection Resumability**: Implement connection recovery mechanisms including session persistence, message queuing during disconnections, automatic reconnection logic, and state synchronization.\n\n6. **Protocol Compliance**: Ensure full compliance with MCP 2025-03-26 specification including message formatting, error handling, status codes, and protocol negotiation.\n\n7. **Performance Optimization**: Implement connection pooling, efficient message serialization/deserialization, and memory management for long-running sessions.",
        "testStrategy": "Comprehensive testing approach should include:\n\n1. **Unit Tests**: Test individual components (session manager, SSE handler, HTTP endpoints) with mock dependencies and edge cases.\n\n2. **Integration Tests**: Verify end-to-end communication flows including request-response cycles, SSE streaming, session creation/destruction, and error propagation.\n\n3. **Security Testing**: Validate authentication mechanisms, test CORS policies, verify rate limiting functionality, and conduct input validation testing with malicious payloads.\n\n4. **Resilience Testing**: Test connection recovery scenarios including network interruptions, server restarts, client disconnections, and session timeout handling.\n\n5. **Performance Testing**: Conduct load testing with multiple concurrent sessions, measure memory usage during long-running connections, and verify message throughput under various conditions.\n\n6. **Compliance Testing**: Validate against MCP specification requirements using protocol conformance tests, verify message format compliance, and test error response formats.\n\n7. **Browser Compatibility**: Test SSE functionality across different browsers and HTTP client libraries to ensure broad compatibility.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze MCP 2025-03-26 Specification Requirements",
            "description": "Conduct comprehensive analysis of the MCP Streamable HTTP transport specification to identify all technical requirements, constraints, and implementation guidelines.",
            "dependencies": [],
            "details": "Review the complete MCP 2025-03-26 specification document, extract all HTTP transport requirements, create a requirements matrix covering endpoints, message formats, error codes, security requirements, and protocol negotiation rules. Document any ambiguities or implementation decisions needed. Create a compliance checklist for validation.",
            "status": "pending",
            "testStrategy": "Create test cases based on specification requirements and validate against official MCP test vectors if available."
          },
          {
            "id": 2,
            "title": "Design HTTP Transport Architecture",
            "description": "Design the overall architecture for the MCP HTTP transport layer including component structure, interfaces, and data flow patterns.",
            "dependencies": [
              1
            ],
            "details": "Create architectural diagrams showing HTTP endpoint handlers, SSE connection managers, session managers, and security layers. Define interfaces for transport abstraction, message routing, and connection lifecycle management. Design class hierarchies and module organization. Plan for extensibility and maintainability.",
            "status": "pending",
            "testStrategy": "Review architecture design with stakeholders and validate against specification requirements."
          },
          {
            "id": 3,
            "title": "Implement Core HTTP Endpoints",
            "description": "Implement the fundamental HTTP POST and GET endpoints for MCP request handling and SSE connection establishment.",
            "dependencies": [
              2
            ],
            "details": "Create HTTP server with POST endpoint for MCP JSON-RPC requests and GET endpoint for SSE connections. Implement proper content-type handling (application/json, text/event-stream), request parsing, response formatting, and basic error handling. Add endpoint routing and method validation.",
            "status": "pending",
            "testStrategy": "Unit tests for endpoint routing, request/response handling, and content-type validation. Integration tests with HTTP clients."
          },
          {
            "id": 4,
            "title": "Implement Server-Sent Events Streaming",
            "description": "Build the SSE streaming infrastructure for real-time bidirectional communication between client and server.",
            "dependencies": [
              3
            ],
            "details": "Implement SSE protocol with proper event formatting (data, event, id fields), connection keep-alive mechanisms, heartbeat functionality, and graceful connection termination. Handle SSE-specific headers, implement event queuing, and manage multiple concurrent SSE connections with proper resource cleanup.",
            "status": "pending",
            "testStrategy": "Test SSE connection establishment, event streaming, connection persistence, and proper cleanup. Validate SSE format compliance."
          },
          {
            "id": 5,
            "title": "Develop Session Management System",
            "description": "Create comprehensive session lifecycle management with unique identifiers, state tracking, and cleanup procedures.",
            "dependencies": [
              4
            ],
            "details": "Implement session creation with UUID generation, session state storage (in-memory and persistent options), timeout handling with configurable expiration, session cleanup procedures, and session validation. Create session registry for tracking active sessions and implement session-based message routing.",
            "status": "pending",
            "testStrategy": "Test session creation, expiration, cleanup, and concurrent session handling. Validate session isolation and state consistency."
          },
          {
            "id": 6,
            "title": "Implement Security Layer",
            "description": "Integrate comprehensive security features including authentication, authorization, CORS, rate limiting, and input validation.",
            "dependencies": [
              5
            ],
            "details": "Implement multiple authentication methods (API keys, JWT tokens, OAuth), CORS policy configuration, rate limiting with configurable thresholds, comprehensive input validation and sanitization, secure header handling, and security middleware integration. Add logging for security events.",
            "status": "pending",
            "testStrategy": "Security testing including authentication bypass attempts, rate limiting validation, CORS policy testing, and input validation fuzzing."
          },
          {
            "id": 7,
            "title": "Build Connection Resumability Features",
            "description": "Implement connection recovery mechanisms including session persistence, message queuing, and automatic reconnection logic.",
            "dependencies": [
              6
            ],
            "details": "Create session persistence layer with database/file storage, implement message queuing for disconnected clients, build automatic reconnection logic with exponential backoff, implement state synchronization for resumed connections, and add connection health monitoring with recovery triggers.",
            "status": "pending",
            "testStrategy": "Test connection interruption scenarios, message delivery guarantees, session recovery, and state synchronization accuracy."
          },
          {
            "id": 8,
            "title": "Implement Protocol Compliance and Error Handling",
            "description": "Ensure full MCP specification compliance with proper message formatting, comprehensive error handling, and status code management.",
            "dependencies": [
              7
            ],
            "details": "Implement MCP-compliant JSON-RPC message formatting, comprehensive error code mapping, proper HTTP status code usage, protocol version negotiation, message validation against MCP schema, and detailed error response formatting. Add protocol compliance validation middleware.",
            "status": "pending",
            "testStrategy": "Compliance testing against MCP specification, error scenario testing, and protocol negotiation validation."
          },
          {
            "id": 9,
            "title": "Performance Optimization and Testing",
            "description": "Optimize performance through connection pooling, efficient serialization, memory management, and conduct comprehensive testing.",
            "dependencies": [
              8
            ],
            "details": "Implement connection pooling for HTTP clients, optimize JSON serialization/deserialization, add memory management for long-running sessions, implement caching strategies, add performance monitoring and metrics collection. Conduct load testing, stress testing, and memory leak detection.",
            "status": "pending",
            "testStrategy": "Performance benchmarking, load testing with multiple concurrent connections, memory usage profiling, and stress testing under high message volumes."
          },
          {
            "id": 10,
            "title": "Documentation and Release Preparation",
            "description": "Create comprehensive documentation, finalize testing, and prepare for production release.",
            "dependencies": [
              9
            ],
            "details": "Write API documentation with endpoint specifications, create integration guides and examples, document configuration options and security best practices, prepare deployment guides, conduct final integration testing, create release notes, and package for distribution with proper versioning.",
            "status": "pending",
            "testStrategy": "End-to-end integration testing, documentation review, and release candidate validation in staging environment."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-10T17:30:24.700Z",
      "updated": "2025-07-10T17:30:50.955Z",
      "description": "Implement MCP Streamable HTTP transport (2025-03-26 spec) for HTTP/SSE support in the MCP server."
    }
  },
  "feature-streamable-http": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement MCP Streamable HTTP Transport",
        "description": "Implement the complete MCP Streamable HTTP transport layer according to the 2025-03-26 specification, including HTTP POST/GET endpoints, Server-Sent Events streaming, session management, security features, and connection resumability.",
        "details": "This task involves implementing a comprehensive HTTP transport layer for the Model Context Protocol (MCP) that supports both traditional request-response patterns and streaming communication. Key implementation components include:\n\n1. **HTTP Endpoints**: Create POST endpoint for MCP requests and GET endpoint for establishing SSE connections. Implement proper content-type handling (application/json for requests, text/event-stream for SSE).\n\n2. **Server-Sent Events (SSE) Streaming**: Implement SSE protocol for real-time bidirectional communication, including proper event formatting, connection keep-alive mechanisms, and graceful connection handling.\n\n3. **Session Management**: Design and implement session lifecycle management with unique session identifiers, session state tracking, timeout handling, and proper cleanup procedures.\n\n4. **Security Implementation**: Integrate authentication mechanisms (API keys, OAuth, JWT tokens), implement CORS policies, add rate limiting, input validation, and secure header handling.\n\n5. **Connection Resumability**: Implement connection recovery mechanisms including session persistence, message queuing during disconnections, automatic reconnection logic, and state synchronization.\n\n6. **Protocol Compliance**: Ensure full compliance with MCP 2025-03-26 specification including message formatting, error handling, status codes, and protocol negotiation.\n\n7. **Performance Optimization**: Implement connection pooling, efficient message serialization/deserialization, and memory management for long-running sessions.",
        "testStrategy": "Comprehensive testing approach should include:\n\n1. **Unit Tests**: Test individual components (session manager, SSE handler, HTTP endpoints) with mock dependencies and edge cases.\n\n2. **Integration Tests**: Verify end-to-end communication flows including request-response cycles, SSE streaming, session creation/destruction, and error propagation.\n\n3. **Security Testing**: Validate authentication mechanisms, test CORS policies, verify rate limiting functionality, and conduct input validation testing with malicious payloads.\n\n4. **Resilience Testing**: Test connection recovery scenarios including network interruptions, server restarts, client disconnections, and session timeout handling.\n\n5. **Performance Testing**: Conduct load testing with multiple concurrent sessions, measure memory usage during long-running connections, and verify message throughput under various conditions.\n\n6. **Compliance Testing**: Validate against MCP specification requirements using protocol conformance tests, verify message format compliance, and test error response formats.\n\n7. **Browser Compatibility**: Test SSE functionality across different browsers and HTTP client libraries to ensure broad compatibility.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-10T17:30:24.700Z",
      "updated": "2025-07-10T17:30:50.955Z",
      "description": "Implement MCP Streamable HTTP transport (2025-03-26 spec) for HTTP/SSE support in the MCP server."
    }
  },
  "bug-fixes-code-quality": {
    "tasks": [
      {
        "id": 1,
        "title": "Remove API Keys from Repository History",
        "description": "Critical security fix: Remove actual API keys that were committed to .env file and clean git history",
        "details": "Use git filter-branch to remove .env file from all history. Update .env with placeholder values. Verify no API keys remain in git log.",
        "testStrategy": "Verify git log shows no API keys, test that placeholder .env still allows development",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Fix Race Conditions in Rate Limiting",
        "description": "Critical bug fix: Resolve race conditions in global requestQueue that could bypass rate limiting",
        "details": "Implement proper synchronization for requestQueue access. Replace busy-waiting with event-driven approach. Add concurrency tests.",
        "testStrategy": "Concurrent request tests, rate limit bypass prevention verification",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Standardize ID Types Across Schemas",
        "description": "Fix type inconsistencies where IDs are sometimes strings, sometimes numbers, causing API call failures",
        "details": "Audit all ID fields in src/types/float.ts. Choose consistent type (recommend string). Update all API calls and validation.",
        "testStrategy": "Type checking, API integration tests with different ID formats",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Eliminate Unsafe Type Assertions",
        "description": "Replace type assertions with proper type guards throughout codebase to prevent runtime type errors",
        "details": "Find all 'as T' assertions, particularly in format conversion and API response handling. Replace with proper type guards and validation.",
        "testStrategy": "Type guard unit tests, runtime type validation tests",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Fix Memory Leaks in Request Queue",
        "description": "Resolve memory leaks in global requestQueue and cleanup interval management",
        "details": "Implement proper cleanup of requestQueue and intervals. Add bounds checking. Ensure cleanup on graceful shutdown.",
        "testStrategy": "Memory usage tests, long-running process verification, graceful shutdown tests",
        "status": "pending",
        "dependencies": [
          "2"
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Add Request Timeout Configuration",
        "description": "Implement proper timeout handling for HTTP requests to prevent hanging connections",
        "details": "Add timeout configuration to fetch calls. Handle timeout errors appropriately. Test timeout scenarios.",
        "testStrategy": "Timeout simulation tests, error handling verification",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement API Response Caching",
        "description": "Add caching layer to reduce redundant API calls and improve performance",
        "details": "Design cache strategy with TTL. Implement for frequently accessed endpoints like projects, people, statuses. Add cache invalidation.",
        "testStrategy": "Cache hit/miss tests, TTL expiration tests, performance benchmarks",
        "status": "pending",
        "dependencies": [
          "6"
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Fix Date Handling Vulnerabilities",
        "description": "Resolve critical date handling bugs that could cause runtime failures",
        "details": "Fix date construction from null values, invalid date arithmetic, and unsafe date sorting operations throughout codebase.",
        "testStrategy": "Date validation tests, edge case testing with null/invalid dates",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Consolidate Dual Tool Architecture",
        "description": "Choose single tool pattern and deprecate the hybrid architecture that has 246+ legacy tools plus 4 optimized tools",
        "details": "Analyze both approaches. Recommend decision-tree pattern. Create migration plan for legacy tools. Implement consolidation strategy.",
        "testStrategy": "Integration tests for tool functionality, performance comparisons",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Proper Error Context Preservation",
        "description": "Fix error handling gaps where original error context and stack traces are lost",
        "details": "Review error wrapping patterns. Preserve original stack traces. Add error correlation IDs. Standardize error logging.",
        "testStrategy": "Error propagation tests, debugging experience verification",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Add Circuit Breaker Patterns",
        "description": "Implement circuit breaker to prevent cascading failures when external APIs are down",
        "details": "Design circuit breaker for Float API calls. Add failure thresholds and recovery logic. Include monitoring and alerting.",
        "testStrategy": "Failure simulation tests, recovery time verification",
        "status": "pending",
        "dependencies": [
          "6"
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Refactor God Objects and Implement Dependency Injection",
        "description": "Break down FloatApi class and implement proper dependency injection patterns",
        "details": "Split FloatApi into focused services. Create DI container. Abstract external dependencies. Enable proper testing and mocking.",
        "testStrategy": "Unit tests for each service, mocking verification, integration tests",
        "status": "pending",
        "dependencies": [
          "9"
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-08T02:10:55.003Z",
      "updated": "2025-08-08T02:12:17.765Z",
      "description": "Code review bug fixes and quality improvements"
    }
  }
}