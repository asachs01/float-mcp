# Float MCP Server - Complete API Implementation PRD

## Project Overview
This project aims to implement a comprehensive Float MCP (Model Context Protocol) server that provides complete coverage of the Float API v3 endpoints. Currently, the project has partial implementation covering basic CRUD operations for Projects, People, Tasks/Allocations, Clients, Departments, and Reports. However, many critical Float API endpoints are missing.

## Current Implementation Status
**✅ Implemented Endpoints:**
- Projects (CRUD)
- People (CRUD) 
- Tasks/Allocations (CRUD)
- Clients (CRUD)
- Departments (CRUD)
- Reports (Time, Project, People Utilization)

**❌ Missing Endpoints (Based on Official Float API Documentation):**
- Accounts
- Roles  
- Statuses
- Time Off
- Time Off Types
- Public Holidays
- Team Holidays
- Phases
- Project Tasks (distinct from general Tasks)
- Milestones
- Logged Time (distinct from Time Reports)

## Technical Requirements

### Architecture Constraints
- Maintain existing Zod schema validation approach
- Use current TypeScript/Node.js stack with Docker deployment
- Follow existing patterns in `src/tools/` for new endpoints
- Maintain compatibility with existing Claude Desktop MCP integration
- All endpoints must handle Float API's nullable field patterns
- Support both JSON and XML formats as per Float API specification

### API Specifications
Based on official Float API v3 documentation (https://developer.float.com/api_reference.html):

**1. Accounts Endpoint**
- List accounts
- Get account details
- Update account information
- Account permissions management

**2. Roles Endpoint**
- List roles
- Create, read, update, delete roles
- Role-based access control integration

**3. Statuses Endpoint**
- List project/task statuses
- Create custom statuses
- Status management operations

**4. Time Off Management**
- List time off requests
- Create/approve/reject time off
- Time off calendar integration
- Bulk time off operations

**5. Time Off Types**
- List time off types (vacation, sick, etc.)
- Create custom time off types
- Type configuration management

**6. Holiday Management**
- Public holidays listing
- Team-specific holidays
- Holiday calendar management
- Multi-region holiday support

**7. Phases**
- Project phase management
- Phase CRUD operations
- Phase scheduling and dependencies

**8. Project Tasks (Enhanced)**
- Distinct from general allocations
- Task-specific operations
- Project task hierarchies
- Task dependencies

**9. Milestones**
- Project milestone management
- Milestone tracking
- Date-based milestone operations

**10. Logged Time**
- Time entry logging
- Time tracking operations
- Timesheet management
- Billable/non-billable time tracking

## Implementation Goals

### Primary Objectives
1. **Complete API Coverage**: Implement all missing Float API v3 endpoints
2. **Schema Accuracy**: Create proper Zod schemas that handle Float's nullable field patterns
3. **Type Safety**: Maintain strict TypeScript typing throughout
4. **Error Handling**: Robust error handling for all Float API response patterns
5. **Documentation**: Comprehensive tool descriptions for MCP integration

### Secondary Objectives
1. **Performance**: Efficient API calls with proper pagination support
2. **Testing**: Comprehensive test coverage for new endpoints
3. **Compatibility**: Maintain backward compatibility with existing tools
4. **Extensibility**: Clean architecture for future Float API updates

## Technical Implementation Details

### Schema Design Patterns
- Use nullable schemas for fields that Float API returns as null
- Implement proper union types for ID fields (string | number)
- Handle Float's inconsistent date/timestamp field naming
- Support both detailed and summary response formats

### Tool Architecture
- Follow existing `createTool` pattern from `src/tools/base.ts`
- Implement consistent naming: `list*`, `get*`, `create*`, `update*`, `delete*`
- Provide comprehensive parameter validation
- Include proper error handling and response validation

### API Integration Points
- Extend existing `FloatApi` service in `src/services/float-api.js`
- Maintain pagination support using `getPaginated` method
- Handle Float API authentication and rate limiting
- Support filtering, sorting, and field selection parameters

## Success Criteria

### Functional Requirements
1. All 10 missing endpoint categories fully implemented
2. 100% compatibility with Float API v3 specification
3. Proper handling of all Float API response formats
4. Complete CRUD operations where supported by Float API
5. Comprehensive parameter validation and error handling

### Quality Requirements
1. Zero breaking changes to existing functionality
2. Complete TypeScript type coverage
3. Consistent tool naming and parameter patterns
4. Proper Zod schema validation for all responses
5. Docker image builds successfully with new endpoints

### Integration Requirements
1. Seamless Claude Desktop MCP integration
2. All tools appear correctly in MCP tool listings
3. Proper tool descriptions and parameter documentation
4. Consistent error handling across all endpoints
5. Maintains existing authentication patterns

## Project Phases

### Phase 1: Core User Management (Accounts, Roles, Statuses)
Implement fundamental user and permission management endpoints that support other features.

### Phase 2: Time Management (Time Off, Time Off Types, Holidays)
Add comprehensive time-off and holiday management capabilities.

### Phase 3: Advanced Project Features (Phases, Milestones, Project Tasks)
Enhance project management with detailed tracking capabilities.

### Phase 4: Time Tracking (Logged Time)
Implement detailed time logging and tracking features.

### Phase 5: Integration & Testing
Comprehensive testing, documentation, and integration verification.

## Dependencies
- Existing Float API authentication and service layer
- Current Docker and TypeScript build system
- Zod schema validation library
- Existing MCP tools infrastructure

## Risk Mitigation
1. **API Changes**: Monitor Float API documentation for version updates
2. **Schema Validation**: Implement flexible schemas that handle Float's nullable patterns
3. **Rate Limiting**: Respect Float API rate limits in implementation
4. **Backward Compatibility**: Ensure existing tools continue to function
5. **Error Handling**: Comprehensive error scenarios and graceful degradation

This PRD outlines the complete implementation of missing Float API endpoints to achieve full API coverage in the Float MCP server. 